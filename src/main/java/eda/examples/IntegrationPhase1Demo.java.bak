package eda.examples;

import eda.integration.*;
import io.micrometer.core.instrument.MeterRegistry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.time.Duration;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

/**
 * Demonstration of Phase 1 Integration Service Improvements
 * 
 * Shows the enhanced features:
 * - Proper logging with SLF4J
 * - Metrics collection with Micrometer
 * - Input validation with detailed error messages
 * - Consistent exception handling hierarchy
 * - Production-ready observability
 */
@Component
public class IntegrationPhase1Demo implements CommandLineRunner {
    private static final Logger LOGGER = LoggerFactory.getLogger(IntegrationPhase1Demo.class);
    
    // @Autowired(required = false)
    // private RestIntegrationService restService;
    
    @Autowired(required = false)
    private IntegrationValidator validator;
    
    @Autowired(required = false)
    private IntegrationMetrics metrics;
    
    @Autowired(required = false)
    private MeterRegistry meterRegistry;
    
    @Override
    public void run(String... args) {
        // Note: Service implementations commented out for compilation
        LOGGER.info("Phase 1 improvements available - service implementations can be uncommented when ready");
        
        LOGGER.info("=== Integration Service Phase 1 Improvements Demo ===");
        
        try {
            // 1. Demonstrate proper logging and metrics
            demonstrateLoggingAndMetrics();
            
            // 2. Demonstrate input validation
            demonstrateValidation();
            
            // 3. Demonstrate exception handling
            demonstrateExceptionHandling();
            
            // 4. Demonstrate resilience patterns with monitoring
            demonstrateResilienceMonitoring();
            
            // 5. Show metrics collection
            showMetricsCollection();
            
        } catch (Exception e) {
            LOGGER.error("Phase 1 demo failed", e);
        }
        
        LOGGER.info("=== Phase 1 Demo Complete ===");
    }
    
    /**
     * Demonstrate enhanced logging and metrics collection
     */
    private void demonstrateLoggingAndMetrics() {
        LOGGER.info("1. Demonstrating Enhanced Logging and Metrics");
        
        // Create a valid request
        UserProfileRequest profileRequest = new UserProfileRequest("user-123", true);
        
        IntegrationRequest<UserProfileRequest> request = new GenericIntegrationRequest<>(
            UUID.randomUUID().toString(),
            profileRequest,
            IntegrationType.REST
        ).withHeader("Authorization", "Bearer demo-token")
         .withHeader("X-Request-Source", "phase1-demo");
        
        IntegrationConfig config = new IntegrationConfig(
            "https://api.example.com/users/profile",
            Map.of(
                "timeout", "5000",
                "cache", "enabled"
            )
        );
        
        // Execute with enhanced logging
        LOGGER.info("Executing request with correlation ID: {}", request.getCorrelationId());
        
        // Service execution commented out - would be:
        // CompletableFuture<IntegrationResponse<UserProfileResponse>> future = 
        //     restService.executeAsync(request, UserProfileResponse.class, config);
        // 
        // future.thenAccept(response -> {
        //     if (response.isSuccess()) {
        //         LOGGER.info("✅ Request completed successfully in {}ms", 
        //             response.getMetadata().get("duration_ms"));
        //         LOGGER.debug("Response metadata: {}", response.getMetadata());
        //     } else {
        //         LOGGER.error("❌ Request failed: {}", response.getErrorMessage());
        //     }
        // }).exceptionally(throwable -> {
        //     LOGGER.error("🔥 Unexpected error during request", throwable);
        //     return null;
        // });
        
        LOGGER.info("✅ Logging and metrics infrastructure ready for use");
        
        // Wait briefly for async completion
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * Demonstrate comprehensive input validation
     */
    private void demonstrateValidation() {
        LOGGER.info("2. Demonstrating Input Validation");
        
        if (validator == null) {
            LOGGER.warn("IntegrationValidator not available");
            return;
        }
        
        // Test 1: Invalid correlation ID (too long)
        String longCorrelationId = "correlation-id-" + "x".repeat(300);
        IntegrationRequest<String> invalidRequest1 = new GenericIntegrationRequest<>(
            longCorrelationId, "test-data", IntegrationType.REST);
        
        IntegrationValidator.ValidationResult result1 = validator.validateRequest(invalidRequest1);
        LOGGER.info("Validation result for long correlation ID - Valid: {}, Errors: {}", 
            result1.isValid(), result1.getErrors());
        
        // Test 2: Invalid configuration (empty endpoint)
        IntegrationConfig invalidConfig = new IntegrationConfig("", Map.of());
        IntegrationValidator.ValidationResult result2 = validator.validateConfig(invalidConfig);
        LOGGER.info("Validation result for empty endpoint - Valid: {}, Errors: {}", 
            result2.isValid(), result2.getErrors());
        
        // Test 3: Invalid resilience configuration
        ResilienceConfig invalidResilienceConfig = ResilienceConfig.builder()
            .timeout(Duration.ofMillis(50)) // Too short
            .maxRetryAttempts(-1) // Negative
            .circuitBreakerFailureThreshold(1.5) // > 1.0
            .build();
        
        IntegrationValidator.ValidationResult result3 = validator.validateResilienceConfig(invalidResilienceConfig);
        LOGGER.info("Validation result for invalid resilience config - Valid: {}, Errors: {}", 
            result3.isValid(), result3.getErrors());
        
        // Test 4: Valid configuration
        ResilienceConfig validConfig = ResilienceConfig.builder()
            .timeout(Duration.ofSeconds(30))
            .maxRetryAttempts(3)
            .circuitBreakerFailureThreshold(0.5)
            .build();
        
        IntegrationValidator.ValidationResult result4 = validator.validateResilienceConfig(validConfig);
        LOGGER.info("Validation result for valid resilience config - Valid: {}, Errors: {}", 
            result4.isValid(), result4.getErrors());
    }
    
    /**
     * Demonstrate enhanced exception handling hierarchy
     */
    private void demonstrateExceptionHandling() {
        LOGGER.info("3. Demonstrating Exception Handling Hierarchy");
        
        try {
            // Validation Exception
            throw new IntegrationException.ValidationException(
                "Required field missing", "corr-validation", IntegrationType.REST);
        } catch (IntegrationException.ValidationException e) {
            LOGGER.error("Caught validation exception: {}", e.toString());
        }
        
        try {
            // Connectivity Exception
            throw new IntegrationException.ConnectivityException(
                "Connection refused", new RuntimeException("Network unreachable"), 
                "corr-connectivity", IntegrationType.KAFKA, "kafka://localhost:9092");
        } catch (IntegrationException.ConnectivityException e) {
            LOGGER.error("Caught connectivity exception: {}", e.toString());
            LOGGER.debug("Root cause:", e.getCause());
        }
        
        try {
            // Timeout Exception
            throw new IntegrationException.TimeoutException(
                "Service did not respond", 30000, "corr-timeout", 
                IntegrationType.GRAPHQL, "https://api.example.com/graphql");
        } catch (IntegrationException.TimeoutException e) {
            LOGGER.error("Caught timeout exception: {} (timeout: {}ms)", 
                e.toString(), e.getTimeoutMs());
        }
        
        try {
            // Business Exception
            throw new IntegrationException.BusinessException(
                "Insufficient funds", 402, "{\"error\":\"INSUFFICIENT_FUNDS\"}", 
                "corr-business", IntegrationType.REST, "https://api.payment.com/charge");
        } catch (IntegrationException.BusinessException e) {
            LOGGER.error("Caught business exception: {} (HTTP {})", 
                e.toString(), e.getStatusCode());
            LOGGER.debug("Response body: {}", e.getResponseBody());
        }
    }
    
    /**
     * Demonstrate resilience patterns with enhanced monitoring
     */
    private void demonstrateResilienceMonitoring() {
        LOGGER.info("4. Demonstrating Resilience Monitoring");
        
        // Create request with custom resilience configuration
        ResilienceConfig criticalConfig = ResilienceConfig.builder()
            .enableCircuitBreaker(true)
            .circuitBreakerFailureThreshold(0.3) // 30% failure rate
            .circuitBreakerMinCalls(3)
            .circuitBreakerWaitDuration(Duration.ofSeconds(10))
            .enableRetry(true)
            .maxRetryAttempts(3)
            .retryDelay(Duration.ofSeconds(1))
            .enableTimeout(true)
            .timeout(Duration.ofSeconds(5))
            .build();
        
        PaymentRequest paymentRequest = new PaymentRequest("payment-critical", 999.99, "USD");
        
        IntegrationRequest<PaymentRequest> request = new GenericIntegrationRequest<>(
            UUID.randomUUID().toString(),
            paymentRequest,
            IntegrationType.REST,
            criticalConfig
        ).withHeader("X-Critical-Operation", "true")
         .withHeader("X-Idempotency-Key", UUID.randomUUID().toString());
        
        IntegrationConfig config = new IntegrationConfig(
            "https://payments.example.com/process",
            Map.of("idempotency", "required")
        );
        
        LOGGER.info("Executing critical payment operation with enhanced resilience...");
        
        // CompletableFuture<IntegrationResponse<PaymentResponse>> future = 
        //     restService.executeAsync(request, PaymentResponse.class, config);
        // 
        // future.handle((response, throwable) -> {
        
        LOGGER.info("✅ Resilience patterns configured and ready");
        
        // Would handle response like:
        /*
        future.handle((response, throwable) -> {
            if (throwable != null) {
                LOGGER.error("💥 Critical operation failed with resilience patterns: {}", 
                    throwable.getMessage());
                
                // Log resilience metadata
                if (response != null && response.getMetadata().containsKey("resilience_error")) {
                    LOGGER.info("Resilience error details: {}", response.getMetadata());
                }
            } else if (response != null) {
                if (response.isSuccess()) {
                    LOGGER.info("✅ Critical operation succeeded: {}", response.getData());
                } else {
                    LOGGER.warn("⚠️ Critical operation returned business error: {}", 
                        response.getErrorMessage());
                }
                
                // Log performance metadata
                LOGGER.info("Operation completed in {}ms", response.getMetadata().get("duration_ms"));
            }
            
            return response;
        });
        */
        
        // Wait for completion
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    
    /**
     * Show metrics that have been collected
     */
    private void showMetricsCollection() {
        LOGGER.info("5. Showing Collected Metrics");
        
        if (meterRegistry == null) {
            LOGGER.warn("MeterRegistry not available");
            return;
        }
        
        // Show integration request metrics
        meterRegistry.getMeters().stream()
            .filter(meter -> meter.getId().getName().startsWith("integration."))
            .forEach(meter -> {
                LOGGER.info("📊 Metric: {} = {}", 
                    meter.getId().getName(), 
                    meter.measure());
            });
        
        // Show specific metrics if they exist
        if (meterRegistry.find("integration.requests.total").counter() != null) {
            double totalRequests = meterRegistry.find("integration.requests.total").counter().count();
            LOGGER.info("📈 Total integration requests: {}", totalRequests);
        }
        
        if (meterRegistry.find("integration.requests").timer() != null) {
            var timer = meterRegistry.find("integration.requests").timer();
            LOGGER.info("⏱️ Average request duration: {}ms", timer.mean(java.util.concurrent.TimeUnit.MILLISECONDS));
        }
    }
    
    // Data classes for demo
    record UserProfileRequest(String userId, boolean includePreferences) {}
    record UserProfileResponse(String userId, String name, String email, Map<String, Object> preferences) {}
    
    record PaymentRequest(String paymentId, double amount, String currency) {}
    record PaymentResponse(String transactionId, String status, double processedAmount) {}
}